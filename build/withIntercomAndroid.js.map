{"version":3,"file":"withIntercomAndroid.js","sourceRoot":"","sources":["../src/withIntercomAndroid.ts"],"names":[],"mappings":"AAAA,OAAO,EAAgB,mBAAmB,EAAE,MAAM,sBAAsB,CAAC;AAIzE,MAAM,CAAC,MAAM,mBAAmB,GAAsC,CACpE,MAAM,EACN,EAAE,aAAa,EAAE,KAAK,EAAE,EACxB,EAAE;IACF,MAAM,GAAG,2BAA2B,CAAC,MAAM,EAAE;QAC3C,KAAK;QACL,MAAM,EAAE,aAAuB;KAChC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,2BAA2B,GAGnC,CAAC,MAAM,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE;IACjC,OAAO,mBAAmB,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;QAC/C,MAAM,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC;QAC3B,MAAM,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAC;QAEhC,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEnC,MAAM,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAC3C,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,CACrC,CAAC;QACF,MAAM,aAAa,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAC7C,sCAAsC,CAAC,IAAI,CAAC,IAAI,CAAC,CAClD,CAAC;QAEF,UAAU,CAAC,QAAQ,GAAG;YACpB,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,GAAG,CAAC,CAAC;YAClC,iDAAiD;YACjD,GAAG,KAAK,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,EAAE,aAAa,GAAG,CAAC,CAAC;YAClD,uCAAuC,MAAM,KAAK,KAAK,IAAI;YAC3D,GAAG,KAAK,CAAC,KAAK,CAAC,aAAa,GAAG,CAAC,CAAC;SAClC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEb,OAAO,GAAG,CAAC;IACb,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { ConfigPlugin, withMainApplication } from \"@expo/config-plugins\";\n\nimport type { IntercomPluginProps } from \"./index\";\n\nexport const withIntercomAndroid: ConfigPlugin<IntercomPluginProps> = (\n  config,\n  { androidApiKey, appId }\n) => {\n  config = withIntercomMainApplication(config, {\n    appId,\n    apiKey: androidApiKey as string,\n  });\n\n  return config;\n};\n\nexport const withIntercomMainApplication: ConfigPlugin<{\n  apiKey: string;\n  appId: string;\n}> = (config, { apiKey, appId }) => {\n  return withMainApplication(config, async (cfg) => {\n    const { modResults } = cfg;\n    const { contents } = modResults;\n\n    const lines = contents.split(\"\\n\");\n\n    const importIndex = lines.findIndex((line) =>\n      /^import java.util.List;/.test(line)\n    );\n    const onCreateIndex = lines.findIndex((line) =>\n      /ReactNativeFlipper.initializeFlipper/.test(line)\n    );\n\n    modResults.contents = [\n      ...lines.slice(0, importIndex + 1),\n      \"import com.intercom.reactnative.IntercomModule;\",\n      ...lines.slice(importIndex + 1, onCreateIndex + 1),\n      `    IntercomModule.initialize(this, ${apiKey}, ${appId});`,\n      ...lines.slice(onCreateIndex + 1),\n    ].join(\"\\n\");\n\n    return cfg;\n  });\n};\n"]}